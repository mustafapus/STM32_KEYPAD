
KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800119c  0800119c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800119c  0800119c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800119c  0800119c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800119c  0800119c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a0  080011a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080011a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000014  080011b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080011b8  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d1f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000add  00000000  00000000  00022d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000458  00000000  00000000  00023880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000335  00000000  00000000  00023cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a289  00000000  00000000  0002400d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000340a  00000000  00000000  0002e296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00036cd2  00000000  00000000  000316a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ee0  00000000  00000000  00068374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00069254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001184 	.word	0x08001184

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08001184 	.word	0x08001184

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	; 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
  }
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b7f      	cmp	r3, #127	; 0x7f
 8000268:	d828      	bhi.n	80002bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800026a:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <__NVIC_SetPriority+0xd4>)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	089b      	lsrs	r3, r3, #2
 8000274:	33c0      	adds	r3, #192	; 0xc0
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	589b      	ldr	r3, [r3, r2]
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	0011      	movs	r1, r2
 8000280:	2203      	movs	r2, #3
 8000282:	400a      	ands	r2, r1
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	21ff      	movs	r1, #255	; 0xff
 8000288:	4091      	lsls	r1, r2
 800028a:	000a      	movs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	401a      	ands	r2, r3
 8000290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	22ff      	movs	r2, #255	; 0xff
 8000298:	401a      	ands	r2, r3
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	2303      	movs	r3, #3
 80002a2:	4003      	ands	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <__NVIC_SetPriority+0xd4>)
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	089b      	lsrs	r3, r3, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	33c0      	adds	r3, #192	; 0xc0
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ba:	e031      	b.n	8000320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <__NVIC_SetPriority+0xd8>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230f      	movs	r3, #15
 80002c6:	400b      	ands	r3, r1
 80002c8:	3b08      	subs	r3, #8
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	3306      	adds	r3, #6
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	400a      	ands	r2, r1
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	21ff      	movs	r1, #255	; 0xff
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	401a      	ands	r2, r3
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	2303      	movs	r3, #3
 80002fe:	4003      	ands	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <__NVIC_SetPriority+0xd8>)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	001c      	movs	r4, r3
 800030c:	230f      	movs	r3, #15
 800030e:	4023      	ands	r3, r4
 8000310:	3b08      	subs	r3, #8
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18c3      	adds	r3, r0, r3
 800031c:	3304      	adds	r3, #4
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b003      	add	sp, #12
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <LL_RCC_HSI_Enable+0x18>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <LL_RCC_HSI_Enable+0x18>)
 800033a:	2101      	movs	r1, #1
 800033c:	430a      	orrs	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	40021000 	.word	0x40021000

0800034c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <LL_RCC_HSI_IsReady+0x1c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2202      	movs	r2, #2
 8000356:	4013      	ands	r3, r2
 8000358:	3b02      	subs	r3, #2
 800035a:	425a      	negs	r2, r3
 800035c:	4153      	adcs	r3, r2
 800035e:	b2db      	uxtb	r3, r3
}
 8000360:	0018      	movs	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	40021000 	.word	0x40021000

0800036c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	22f8      	movs	r2, #248	; 0xf8
 800037a:	4393      	bics	r3, r2
 800037c:	0019      	movs	r1, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	00da      	lsls	r2, r3, #3
 8000382:	4b03      	ldr	r3, [pc, #12]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000384:	430a      	orrs	r2, r1
 8000386:	601a      	str	r2, [r3, #0]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <LL_RCC_SetSysClkSource+0x24>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	2203      	movs	r2, #3
 80003a2:	4393      	bics	r3, r2
 80003a4:	0019      	movs	r1, r3
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <LL_RCC_SetSysClkSource+0x24>)
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	605a      	str	r2, [r3, #4]
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	40021000 	.word	0x40021000

080003bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <LL_RCC_GetSysClkSource+0x14>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	220c      	movs	r2, #12
 80003c6:	4013      	ands	r3, r2
}
 80003c8:	0018      	movs	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	40021000 	.word	0x40021000

080003d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	22f0      	movs	r2, #240	; 0xf0
 80003e2:	4393      	bics	r3, r2
 80003e4:	0019      	movs	r1, r3
 80003e6:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	430a      	orrs	r2, r1
 80003ec:	605a      	str	r2, [r3, #4]
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000

080003fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a06      	ldr	r2, [pc, #24]	; (8000424 <LL_RCC_SetAPB1Prescaler+0x28>)
 800040a:	4013      	ands	r3, r2
 800040c:	0019      	movs	r1, r3
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	430a      	orrs	r2, r1
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	40021000 	.word	0x40021000
 8000424:	fffff8ff 	.word	0xfffff8ff

08000428 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <LL_RCC_PLL_Enable+0x18>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <LL_RCC_PLL_Enable+0x18>)
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	0449      	lsls	r1, r1, #17
 8000436:	430a      	orrs	r2, r1
 8000438:	601a      	str	r2, [r3, #0]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <LL_RCC_PLL_IsReady+0x24>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	049b      	lsls	r3, r3, #18
 8000450:	4013      	ands	r3, r2
 8000452:	22fe      	movs	r2, #254	; 0xfe
 8000454:	0612      	lsls	r2, r2, #24
 8000456:	4694      	mov	ip, r2
 8000458:	4463      	add	r3, ip
 800045a:	425a      	negs	r2, r3
 800045c:	4153      	adcs	r3, r2
 800045e:	b2db      	uxtb	r3, r3
}
 8000460:	0018      	movs	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	40021000 	.word	0x40021000

0800046c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800047c:	4013      	ands	r3, r2
 800047e:	0019      	movs	r1, r3
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	025b      	lsls	r3, r3, #9
 8000486:	401a      	ands	r2, r3
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	431a      	orrs	r2, r3
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800048e:	430a      	orrs	r2, r1
 8000490:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000496:	220f      	movs	r2, #15
 8000498:	4393      	bics	r3, r2
 800049a:	0019      	movs	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	220f      	movs	r2, #15
 80004a0:	401a      	ands	r2, r3
 80004a2:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004a4:	430a      	orrs	r2, r1
 80004a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	ffc2ffff 	.word	0xffc2ffff

080004b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004c2:	6959      	ldr	r1, [r3, #20]
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b004      	add	sp, #16
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	69d9      	ldr	r1, [r3, #28]
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <LL_APB1_GRP1_EnableClock+0x28>)
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <LL_APB1_GRP1_EnableClock+0x28>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4013      	ands	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b004      	add	sp, #16
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000

08000510 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <LL_APB1_GRP2_EnableClock+0x28>)
 800051a:	6999      	ldr	r1, [r3, #24]
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_APB1_GRP2_EnableClock+0x28>)
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	430a      	orrs	r2, r1
 8000522:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LL_APB1_GRP2_EnableClock+0x28>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4013      	ands	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b004      	add	sp, #16
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <LL_FLASH_SetLatency+0x24>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	4393      	bics	r3, r2
 800054c:	0019      	movs	r1, r3
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <LL_FLASH_SetLatency+0x24>)
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b002      	add	sp, #8
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40022000 	.word	0x40022000

08000564 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <LL_FLASH_GetLatency+0x14>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2201      	movs	r2, #1
 800056e:	4013      	ands	r3, r2
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40022000 	.word	0x40022000

0800057c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2201      	movs	r2, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}

08000598 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4393      	bics	r3, r2
 80005a8:	001a      	movs	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}

080005ce <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2202      	movs	r2, #2
 80005f2:	4252      	negs	r2, r2
 80005f4:	611a      	str	r2, [r3, #16]
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b002      	add	sp, #8
 80005fc:	bd80      	pop	{r7, pc}

080005fe <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	2b01      	cmp	r3, #1
 8000610:	d101      	bne.n	8000616 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000616:	2300      	movs	r3, #0
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	b002      	add	sp, #8
 800061e:	bd80      	pop	{r7, pc}

08000620 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	2201      	movs	r2, #1
 800062e:	431a      	orrs	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60da      	str	r2, [r3, #12]
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}

0800063c <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	4013      	ands	r3, r2
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	425a      	negs	r2, r3
 8000654:	4153      	adcs	r3, r2
 8000656:	b2db      	uxtb	r3, r3
}
 8000658:	0018      	movs	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}

08000660 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	619a      	str	r2, [r3, #24]
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b002      	add	sp, #8
 8000676:	bd80      	pop	{r7, pc}

08000678 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}

08000690 <delay_1ms>:



void delay_1ms(uint32_t num1){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	delay_1ms_cnt=0;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <delay_1ms+0x28>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
while (delay_1ms_cnt < num1) {asm("NOP");}
 800069e:	e000      	b.n	80006a2 <delay_1ms+0x12>
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <delay_1ms+0x28>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f9      	bhi.n	80006a0 <delay_1ms+0x10>
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	20000030 	.word	0x20000030

080006bc <keypad_scan>:




char keypad_scan(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0


  for(int i = 0; i < 4; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e0d7      	b.n	8000878 <keypad_scan+0x1bc>
  {
    // Set current column as output and low
    switch(i)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d100      	bne.n	80006d0 <keypad_scan+0x14>
 80006ce:	e074      	b.n	80007ba <keypad_scan+0xfe>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	dd00      	ble.n	80006d8 <keypad_scan+0x1c>
 80006d6:	e091      	b.n	80007fc <keypad_scan+0x140>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d04c      	beq.n	8000778 <keypad_scan+0xbc>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	dd00      	ble.n	80006e6 <keypad_scan+0x2a>
 80006e4:	e08a      	b.n	80007fc <keypad_scan+0x140>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d003      	beq.n	80006f4 <keypad_scan+0x38>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d021      	beq.n	8000736 <keypad_scan+0x7a>
 80006f2:	e083      	b.n	80007fc <keypad_scan+0x140>
    {
      case 0:
    	  LL_GPIO_ResetOutputPin(COL1_PORT, COL1_PIN);
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	005a      	lsls	r2, r3, #1
 80006f8:	2390      	movs	r3, #144	; 0x90
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff ffba 	bl	8000678 <LL_GPIO_ResetOutputPin>
    	  LL_GPIO_SetOutputPin(COL2_PORT, COL2_PIN);
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	009a      	lsls	r2, r3, #2
 8000708:	2390      	movs	r3, #144	; 0x90
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff ffa6 	bl	8000660 <LL_GPIO_SetOutputPin>
    	  LL_GPIO_SetOutputPin(COL3_PORT, COL3_PIN);
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	00da      	lsls	r2, r3, #3
 8000718:	2390      	movs	r3, #144	; 0x90
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff ff9e 	bl	8000660 <LL_GPIO_SetOutputPin>
    	  LL_GPIO_SetOutputPin(COL4_PORT, COL4_PIN);
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	011a      	lsls	r2, r3, #4
 8000728:	2390      	movs	r3, #144	; 0x90
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff ff96 	bl	8000660 <LL_GPIO_SetOutputPin>
    	  break;
 8000734:	e062      	b.n	80007fc <keypad_scan+0x140>

      case 1:
    	  LL_GPIO_SetOutputPin(COL1_PORT, COL1_PIN);
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	005a      	lsls	r2, r3, #1
 800073a:	2390      	movs	r3, #144	; 0x90
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff ff8d 	bl	8000660 <LL_GPIO_SetOutputPin>
    	  LL_GPIO_ResetOutputPin(COL2_PORT, COL2_PIN);
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	009a      	lsls	r2, r3, #2
 800074a:	2390      	movs	r3, #144	; 0x90
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff ff91 	bl	8000678 <LL_GPIO_ResetOutputPin>
    	  LL_GPIO_SetOutputPin(COL3_PORT, COL3_PIN);
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	00da      	lsls	r2, r3, #3
 800075a:	2390      	movs	r3, #144	; 0x90
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ff7d 	bl	8000660 <LL_GPIO_SetOutputPin>
    	  LL_GPIO_SetOutputPin(COL4_PORT, COL4_PIN);
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	011a      	lsls	r2, r3, #4
 800076a:	2390      	movs	r3, #144	; 0x90
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff ff75 	bl	8000660 <LL_GPIO_SetOutputPin>
    	  break;
 8000776:	e041      	b.n	80007fc <keypad_scan+0x140>

      case 2:
	  	  LL_GPIO_SetOutputPin(COL1_PORT, COL1_PIN);
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	005a      	lsls	r2, r3, #1
 800077c:	2390      	movs	r3, #144	; 0x90
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	0011      	movs	r1, r2
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ff6c 	bl	8000660 <LL_GPIO_SetOutputPin>
	  	  LL_GPIO_SetOutputPin(COL2_PORT, COL2_PIN);
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	009a      	lsls	r2, r3, #2
 800078c:	2390      	movs	r3, #144	; 0x90
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f7ff ff64 	bl	8000660 <LL_GPIO_SetOutputPin>
	  	  LL_GPIO_ResetOutputPin(COL3_PORT, COL3_PIN);
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	00da      	lsls	r2, r3, #3
 800079c:	2390      	movs	r3, #144	; 0x90
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff68 	bl	8000678 <LL_GPIO_ResetOutputPin>
	  	  LL_GPIO_SetOutputPin(COL4_PORT, COL4_PIN);
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	011a      	lsls	r2, r3, #4
 80007ac:	2390      	movs	r3, #144	; 0x90
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff54 	bl	8000660 <LL_GPIO_SetOutputPin>
	  	  break;
 80007b8:	e020      	b.n	80007fc <keypad_scan+0x140>

      case 3:
	  	  LL_GPIO_SetOutputPin(COL1_PORT, COL1_PIN);
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	005a      	lsls	r2, r3, #1
 80007be:	2390      	movs	r3, #144	; 0x90
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff4b 	bl	8000660 <LL_GPIO_SetOutputPin>
	  	  LL_GPIO_SetOutputPin(COL2_PORT, COL2_PIN);
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	009a      	lsls	r2, r3, #2
 80007ce:	2390      	movs	r3, #144	; 0x90
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff ff43 	bl	8000660 <LL_GPIO_SetOutputPin>
	  	  LL_GPIO_SetOutputPin(COL3_PORT, COL3_PIN);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	00da      	lsls	r2, r3, #3
 80007de:	2390      	movs	r3, #144	; 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff ff3b 	bl	8000660 <LL_GPIO_SetOutputPin>
	  	  LL_GPIO_ResetOutputPin(COL4_PORT, COL4_PIN);
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	011a      	lsls	r2, r3, #4
 80007ee:	2390      	movs	r3, #144	; 0x90
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff ff3f 	bl	8000678 <LL_GPIO_ResetOutputPin>
	  	  break;
 80007fa:	46c0      	nop			; (mov r8, r8)
}


// Read current rows
if(LL_GPIO_IsInputPinSet(ROW1_PORT, ROW1_PIN) == 0)
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	015b      	lsls	r3, r3, #5
 8000800:	4a22      	ldr	r2, [pc, #136]	; (800088c <keypad_scan+0x1d0>)
 8000802:	0019      	movs	r1, r3
 8000804:	0010      	movs	r0, r2
 8000806:	f7ff ff19 	bl	800063c <LL_GPIO_IsInputPinSet>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d104      	bne.n	8000818 <keypad_scan+0x15c>
  return keys[0][i];
 800080e:	4a20      	ldr	r2, [pc, #128]	; (8000890 <keypad_scan+0x1d4>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	18d3      	adds	r3, r2, r3
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	e034      	b.n	8000882 <keypad_scan+0x1c6>
if(LL_GPIO_IsInputPinSet(ROW2_PORT, ROW2_PIN) == 0)
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	019b      	lsls	r3, r3, #6
 800081c:	4a1b      	ldr	r2, [pc, #108]	; (800088c <keypad_scan+0x1d0>)
 800081e:	0019      	movs	r1, r3
 8000820:	0010      	movs	r0, r2
 8000822:	f7ff ff0b 	bl	800063c <LL_GPIO_IsInputPinSet>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d105      	bne.n	8000836 <keypad_scan+0x17a>
  return keys[1][i];
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <keypad_scan+0x1d4>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	3304      	adds	r3, #4
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	e025      	b.n	8000882 <keypad_scan+0x1c6>
if(LL_GPIO_IsInputPinSet(ROW3_PORT, ROW3_PIN) == 0)
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	01db      	lsls	r3, r3, #7
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <keypad_scan+0x1d0>)
 800083c:	0019      	movs	r1, r3
 800083e:	0010      	movs	r0, r2
 8000840:	f7ff fefc 	bl	800063c <LL_GPIO_IsInputPinSet>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d105      	bne.n	8000854 <keypad_scan+0x198>
  return keys[2][i];
 8000848:	4a11      	ldr	r2, [pc, #68]	; (8000890 <keypad_scan+0x1d4>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	3308      	adds	r3, #8
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	e016      	b.n	8000882 <keypad_scan+0x1c6>
if(LL_GPIO_IsInputPinSet(ROW4_PORT, ROW4_PIN) == 0)
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <keypad_scan+0x1d0>)
 800085a:	0019      	movs	r1, r3
 800085c:	0010      	movs	r0, r2
 800085e:	f7ff feed 	bl	800063c <LL_GPIO_IsInputPinSet>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d105      	bne.n	8000872 <keypad_scan+0x1b6>
  return keys[3][i];
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <keypad_scan+0x1d4>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	18d3      	adds	r3, r2, r3
 800086c:	330c      	adds	r3, #12
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	e007      	b.n	8000882 <keypad_scan+0x1c6>
  for(int i = 0; i < 4; i++)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3301      	adds	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b03      	cmp	r3, #3
 800087c:	dc00      	bgt.n	8000880 <keypad_scan+0x1c4>
 800087e:	e723      	b.n	80006c8 <keypad_scan+0xc>
}
return 0; // No key pressed
 8000880:	2300      	movs	r3, #0
}
 8000882:	0018      	movs	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	48000400 	.word	0x48000400
 8000890:	20000000 	.word	0x20000000

08000894 <TIM16_IRQHandler>:


void TIM16_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
if (LL_TIM_IsActiveFlag_UPDATE(TIM16)) {
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <TIM16_IRQHandler+0x28>)
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff feaf 	bl	80005fe <LL_TIM_IsActiveFlag_UPDATE>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d008      	beq.n	80008b6 <TIM16_IRQHandler+0x22>
	LL_TIM_ClearFlag_UPDATE(TIM16);	
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <TIM16_IRQHandler+0x28>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff fe9d 	bl	80005e6 <LL_TIM_ClearFlag_UPDATE>
// 10us
	delay_10us_cnt++;	
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <TIM16_IRQHandler+0x2c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <TIM16_IRQHandler+0x2c>)
 80008b4:	601a      	str	r2, [r3, #0]
}
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40014400 	.word	0x40014400
 80008c0:	20000034 	.word	0x20000034

080008c4 <TIM17_IRQHandler>:




void TIM17_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
if (LL_TIM_IsActiveFlag_UPDATE(TIM17)) {
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <TIM17_IRQHandler+0x34>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fe97 	bl	80005fe <LL_TIM_IsActiveFlag_UPDATE>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d00e      	beq.n	80008f2 <TIM17_IRQHandler+0x2e>
	LL_TIM_ClearFlag_UPDATE(TIM17);	
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <TIM17_IRQHandler+0x34>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fe85 	bl	80005e6 <LL_TIM_ClearFlag_UPDATE>
// 1ms
delay_1ms_cnt++;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <TIM17_IRQHandler+0x38>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <TIM17_IRQHandler+0x38>)
 80008e4:	601a      	str	r2, [r3, #0]
key_pressed = keypad_scan();
 80008e6:	f7ff fee9 	bl	80006bc <keypad_scan>
 80008ea:	0003      	movs	r3, r0
 80008ec:	001a      	movs	r2, r3
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <TIM17_IRQHandler+0x3c>)
 80008f0:	701a      	strb	r2, [r3, #0]

	}
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40014800 	.word	0x40014800
 80008fc:	20000030 	.word	0x20000030
 8000900:	20000038 	.word	0x20000038

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8000908:	2001      	movs	r0, #1
 800090a:	f7ff fe01 	bl	8000510 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	055b      	lsls	r3, r3, #21
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fde6 	bl	80004e4 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8000918:	2301      	movs	r3, #1
 800091a:	425b      	negs	r3, r3
 800091c:	2103      	movs	r1, #3
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fc98 	bl	8000254 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f842 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 f8f0 	bl	8000b0c <MX_GPIO_Init>
  MX_TIM16_Init();
 800092c:	f000 f87e 	bl	8000a2c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000930:	f000 f8b4 	bl	8000a9c <MX_TIM17_Init>
//LL_TIM_SetPrescaler(TIM14, 1);
//LL_TIM_EnableCounter(TIM14);
//LL_TIM_SetAutoReload(TIM14,239);
//////////TIM14 Settings///////////////////
//////////TIM16 Settings///////////////////
LL_TIM_EnableIT_UPDATE(TIM16);
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <main+0x9c>)
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fe72 	bl	8000620 <LL_TIM_EnableIT_UPDATE>
LL_TIM_SetPrescaler(TIM16, 1);
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <main+0x9c>)
 800093e:	2101      	movs	r1, #1
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fe38 	bl	80005b6 <LL_TIM_SetPrescaler>
LL_TIM_EnableCounter(TIM16);
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <main+0x9c>)
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff fe17 	bl	800057c <LL_TIM_EnableCounter>
LL_TIM_SetAutoReload(TIM16,239);
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <main+0x9c>)
 8000950:	21ef      	movs	r1, #239	; 0xef
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff fe3b 	bl	80005ce <LL_TIM_SetAutoReload>
//////////TIM16 Settings///////////////////
//////////TIM17 Settings///////////////////
LL_TIM_EnableCounter(TIM17);
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <main+0xa0>)
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fe0e 	bl	800057c <LL_TIM_EnableCounter>
LL_TIM_EnableIT_UPDATE(TIM17);
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <main+0xa0>)
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff fe5c 	bl	8000620 <LL_TIM_EnableIT_UPDATE>
TIM17->PSC=0;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <main+0xa0>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
TIM17->ARR=47999;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <main+0xa0>)
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <main+0xa4>)
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c

#include "_Set_Timers.h"

 delay_1ms(20);
 8000974:	2014      	movs	r0, #20
 8000976:	f7ff fe8b 	bl	8000690 <delay_1ms>
 delay_1ms(20);
 800097a:	2014      	movs	r0, #20
 800097c:	f7ff fe88 	bl	8000690 <delay_1ms>

 NVIC_SetPriority(SysTick_IRQn, 3);
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2103      	movs	r1, #3
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fc64 	bl	8000254 <__NVIC_SetPriority>
 NVIC_SetPriority(TIM16_IRQn, 3);
 800098c:	2103      	movs	r1, #3
 800098e:	2015      	movs	r0, #21
 8000990:	f7ff fc60 	bl	8000254 <__NVIC_SetPriority>
 NVIC_SetPriority(TIM17_IRQn, 3);
 8000994:	2103      	movs	r1, #3
 8000996:	2016      	movs	r0, #22
 8000998:	f7ff fc5c 	bl	8000254 <__NVIC_SetPriority>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x98>
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40014400 	.word	0x40014400
 80009a4:	40014800 	.word	0x40014800
 80009a8:	0000bb7f 	.word	0x0000bb7f

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f7ff fdc3 	bl	800053c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	f7ff fdd4 	bl	8000564 <LL_FLASH_GetLatency>
 80009bc:	0003      	movs	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d1fa      	bne.n	80009b8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80009c2:	f7ff fcb5 	bl	8000330 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	f7ff fcc0 	bl	800034c <LL_RCC_HSI_IsReady>
 80009cc:	0003      	movs	r3, r0
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d1fa      	bne.n	80009c8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80009d2:	2010      	movs	r0, #16
 80009d4:	f7ff fcca 	bl	800036c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 80009d8:	23a0      	movs	r3, #160	; 0xa0
 80009da:	039b      	lsls	r3, r3, #14
 80009dc:	0019      	movs	r1, r3
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff fd44 	bl	800046c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80009e4:	f7ff fd20 	bl	8000428 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	f7ff fd2b 	bl	8000444 <LL_RCC_PLL_IsReady>
 80009ee:	0003      	movs	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d1fa      	bne.n	80009ea <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fced 	bl	80003d4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fcfe 	bl	80003fc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a00:	2002      	movs	r0, #2
 8000a02:	f7ff fcc7 	bl	8000394 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	f7ff fcd8 	bl	80003bc <LL_RCC_GetSysClkSource>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	2b08      	cmp	r3, #8
 8000a10:	d1fa      	bne.n	8000a08 <SystemClock_Config+0x5c>
  {

  }
  LL_Init1msTick(48000000);
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SystemClock_Config+0x7c>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fb6b 	bl	80010f0 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8000a1a:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <SystemClock_Config+0x7c>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fb77 	bl	8001110 <LL_SetSystemCoreClock>
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	02dc6c00 	.word	0x02dc6c00

08000a2c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	0018      	movs	r0, r3
 8000a36:	2314      	movs	r3, #20
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f000 fb76 	bl	800112c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM16);
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	029b      	lsls	r3, r3, #10
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fd63 	bl	8000510 <LL_APB1_GRP2_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM16_IRQn, 0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2015      	movs	r0, #21
 8000a4e:	f7ff fc01 	bl	8000254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM16_IRQn);
 8000a52:	2015      	movs	r0, #21
 8000a54:	f7ff fbe4 	bl	8000220 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <MX_TIM16_Init+0x68>)
 8000a68:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <MX_TIM16_Init+0x6c>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f000 faa5 	bl	8000fcc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <MX_TIM16_Init+0x6c>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff fd87 	bl	8000598 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b006      	add	sp, #24
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	0000ffff 	.word	0x0000ffff
 8000a98:	40014400 	.word	0x40014400

08000a9c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	2314      	movs	r3, #20
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f000 fb3e 	bl	800112c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM17);
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	02db      	lsls	r3, r3, #11
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fd2b 	bl	8000510 <LL_APB1_GRP2_EnableClock>

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM17_IRQn, 0);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2016      	movs	r0, #22
 8000abe:	f7ff fbc9 	bl	8000254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM17_IRQn);
 8000ac2:	2016      	movs	r0, #22
 8000ac4:	f7ff fbac 	bl	8000220 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <MX_TIM17_Init+0x68>)
 8000ad8:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <MX_TIM17_Init+0x6c>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f000 fa6d 	bl	8000fcc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <MX_TIM17_Init+0x6c>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff fd4f 	bl	8000598 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b006      	add	sp, #24
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	0000ffff 	.word	0x0000ffff
 8000b08:	40014800 	.word	0x40014800

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	003b      	movs	r3, r7
 8000b14:	0018      	movs	r0, r3
 8000b16:	2318      	movs	r3, #24
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f000 fb06 	bl	800112c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	02db      	lsls	r3, r3, #11
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff fcc7 	bl	80004b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	029b      	lsls	r3, r3, #10
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fcc2 	bl	80004b8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(COL1_GPIO_Port, COL1_Pin);
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	005a      	lsls	r2, r3, #1
 8000b38:	2390      	movs	r3, #144	; 0x90
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff fd9a 	bl	8000678 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(COL2_GPIO_Port, COL2_Pin);
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	009a      	lsls	r2, r3, #2
 8000b48:	2390      	movs	r3, #144	; 0x90
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fd92 	bl	8000678 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(COL3_GPIO_Port, COL3_Pin);
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	2390      	movs	r3, #144	; 0x90
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fd8a 	bl	8000678 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(COL4_GPIO_Port, COL4_Pin);
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	011a      	lsls	r2, r3, #4
 8000b68:	2390      	movs	r3, #144	; 0x90
 8000b6a:	05db      	lsls	r3, r3, #23
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff fd82 	bl	8000678 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ROW1_Pin;
 8000b74:	003b      	movs	r3, r7
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	0152      	lsls	r2, r2, #5
 8000b7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b7c:	003b      	movs	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b82:	003b      	movs	r3, r7
 8000b84:	2201      	movs	r2, #1
 8000b86:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 8000b88:	003b      	movs	r3, r7
 8000b8a:	4a4a      	ldr	r2, [pc, #296]	; (8000cb4 <MX_GPIO_Init+0x1a8>)
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	0010      	movs	r0, r2
 8000b90:	f000 f98e 	bl	8000eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ROW2_Pin;
 8000b94:	003b      	movs	r3, r7
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	0192      	lsls	r2, r2, #6
 8000b9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b9c:	003b      	movs	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ROW2_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	003b      	movs	r3, r7
 8000baa:	4a42      	ldr	r2, [pc, #264]	; (8000cb4 <MX_GPIO_Init+0x1a8>)
 8000bac:	0019      	movs	r1, r3
 8000bae:	0010      	movs	r0, r2
 8000bb0:	f000 f97e 	bl	8000eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ROW3_Pin;
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	01d2      	lsls	r2, r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bbc:	003b      	movs	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ROW3_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	003b      	movs	r3, r7
 8000bca:	4a3a      	ldr	r2, [pc, #232]	; (8000cb4 <MX_GPIO_Init+0x1a8>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f000 f96e 	bl	8000eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ROW4_Pin;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	0212      	lsls	r2, r2, #8
 8000bda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2201      	movs	r2, #1
 8000be6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ROW4_GPIO_Port, &GPIO_InitStruct);
 8000be8:	003b      	movs	r3, r7
 8000bea:	4a32      	ldr	r2, [pc, #200]	; (8000cb4 <MX_GPIO_Init+0x1a8>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	0010      	movs	r0, r2
 8000bf0:	f000 f95e 	bl	8000eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = COL1_Pin;
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	0052      	lsls	r2, r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	2201      	movs	r2, #1
 8000c00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c02:	003b      	movs	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c08:	003b      	movs	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0e:	003b      	movs	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(COL1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	003a      	movs	r2, r7
 8000c16:	2390      	movs	r3, #144	; 0x90
 8000c18:	05db      	lsls	r3, r3, #23
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f000 f947 	bl	8000eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = COL2_Pin;
 8000c22:	003b      	movs	r3, r7
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c30:	003b      	movs	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c36:	003b      	movs	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c3c:	003b      	movs	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(COL2_GPIO_Port, &GPIO_InitStruct);
 8000c42:	003a      	movs	r2, r7
 8000c44:	2390      	movs	r3, #144	; 0x90
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 f930 	bl	8000eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = COL3_Pin;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	00d2      	lsls	r2, r2, #3
 8000c56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c58:	003b      	movs	r3, r7
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c5e:	003b      	movs	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c64:	003b      	movs	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c6a:	003b      	movs	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(COL3_GPIO_Port, &GPIO_InitStruct);
 8000c70:	003a      	movs	r2, r7
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 f919 	bl	8000eb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = COL4_Pin;
 8000c7e:	003b      	movs	r3, r7
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c86:	003b      	movs	r3, r7
 8000c88:	2201      	movs	r2, #1
 8000c8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c8c:	003b      	movs	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c92:	003b      	movs	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c98:	003b      	movs	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	003a      	movs	r2, r7
 8000ca0:	2390      	movs	r3, #144	; 0x90
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f902 	bl	8000eb0 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b006      	add	sp, #24
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	48000400 	.word	0x48000400

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf0:	f7ff fff7 	bl	8000ce2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	; (8000d38 <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d1a:	f000 fa0f 	bl	800113c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1e:	f7ff fdf1 	bl	8000904 <main>

08000d22 <LoopForever>:

LoopForever:
    b LoopForever
 8000d22:	e7fe      	b.n	8000d22 <LoopForever>
  ldr   r0, =_estack
 8000d24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d30:	080011a4 	.word	0x080011a4
  ldr r2, =_sbss
 8000d34:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d38:	2000003c 	.word	0x2000003c

08000d3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_IRQHandler>

08000d3e <LL_GPIO_SetPinMode>:
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6819      	ldr	r1, [r3, #0]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	435b      	muls	r3, r3
 8000d52:	001a      	movs	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	189b      	adds	r3, r3, r2
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	400b      	ands	r3, r1
 8000d5e:	001a      	movs	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	435b      	muls	r3, r3
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	434b      	muls	r3, r1
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b004      	add	sp, #16
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <LL_GPIO_SetPinOutputType>:
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	43d2      	mvns	r2, r2
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	434b      	muls	r3, r1
 8000d92:	431a      	orrs	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	605a      	str	r2, [r3, #4]
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LL_GPIO_SetPinSpeed>:
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6899      	ldr	r1, [r3, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	435b      	muls	r3, r3
 8000db4:	001a      	movs	r2, r3
 8000db6:	0013      	movs	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	189b      	adds	r3, r3, r2
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	435b      	muls	r3, r3
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	434b      	muls	r3, r1
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	609a      	str	r2, [r3, #8]
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LL_GPIO_SetPinPull>:
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	68d9      	ldr	r1, [r3, #12]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	435b      	muls	r3, r3
 8000dec:	001a      	movs	r2, r3
 8000dee:	0013      	movs	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	189b      	adds	r3, r3, r2
 8000df4:	43db      	mvns	r3, r3
 8000df6:	400b      	ands	r3, r1
 8000df8:	001a      	movs	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	435b      	muls	r3, r3
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	434b      	muls	r3, r1
 8000e02:	431a      	orrs	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	60da      	str	r2, [r3, #12]
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <LL_GPIO_SetAFPin_0_7>:
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6a19      	ldr	r1, [r3, #32]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	435b      	muls	r3, r3
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	4353      	muls	r3, r2
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	435a      	muls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	1a9b      	subs	r3, r3, r2
 8000e32:	43db      	mvns	r3, r3
 8000e34:	400b      	ands	r3, r1
 8000e36:	001a      	movs	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	435b      	muls	r3, r3
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	434b      	muls	r3, r1
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	434b      	muls	r3, r1
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	434b      	muls	r3, r1
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	621a      	str	r2, [r3, #32]
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <LL_GPIO_SetAFPin_8_15>:
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	0a12      	lsrs	r2, r2, #8
 8000e6e:	4353      	muls	r3, r2
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	0a12      	lsrs	r2, r2, #8
 8000e74:	4353      	muls	r3, r2
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	0a12      	lsrs	r2, r2, #8
 8000e7a:	435a      	muls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	1a9b      	subs	r3, r3, r2
 8000e82:	43db      	mvns	r3, r3
 8000e84:	400b      	ands	r3, r1
 8000e86:	001a      	movs	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	0a09      	lsrs	r1, r1, #8
 8000e90:	434b      	muls	r3, r1
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	0a09      	lsrs	r1, r1, #8
 8000e96:	434b      	muls	r3, r1
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	0a09      	lsrs	r1, r1, #8
 8000e9c:	434b      	muls	r3, r1
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	434b      	muls	r3, r1
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b004      	add	sp, #16
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000ebe:	e048      	b.n	8000f52 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d03a      	beq.n	8000f4c <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d003      	beq.n	8000ee6 <LL_GPIO_Init+0x36>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d10e      	bne.n	8000f04 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff ff56 	bl	8000da0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff ff39 	bl	8000d76 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff63 	bl	8000dd8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d111      	bne.n	8000f3e <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2bff      	cmp	r3, #255	; 0xff
 8000f1e:	d807      	bhi.n	8000f30 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ff71 	bl	8000e10 <LL_GPIO_SetAFPin_0_7>
 8000f2e:	e006      	b.n	8000f3e <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff ff8c 	bl	8000e56 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff fef9 	bl	8000d3e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	40da      	lsrs	r2, r3
 8000f5a:	1e13      	subs	r3, r2, #0
 8000f5c:	d1b0      	bne.n	8000ec0 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LL_TIM_SetPrescaler>:
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LL_TIM_SetAutoReload>:
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LL_TIM_SetRepetitionCounter>:
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	615a      	str	r2, [r3, #20]
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a30      	ldr	r2, [pc, #192]	; (80010a0 <LL_TIM_Init+0xd4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d003      	beq.n	8000fec <LL_TIM_Init+0x20>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <LL_TIM_Init+0xd8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d107      	bne.n	8000ffc <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2270      	movs	r2, #112	; 0x70
 8000ff0:	4393      	bics	r3, r2
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <LL_TIM_Init+0xd4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d013      	beq.n	800102c <LL_TIM_Init+0x60>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <LL_TIM_Init+0xd8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d00f      	beq.n	800102c <LL_TIM_Init+0x60>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <LL_TIM_Init+0xdc>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00b      	beq.n	800102c <LL_TIM_Init+0x60>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <LL_TIM_Init+0xe0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <LL_TIM_Init+0x60>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a24      	ldr	r2, [pc, #144]	; (80010b0 <LL_TIM_Init+0xe4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d003      	beq.n	800102c <LL_TIM_Init+0x60>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <LL_TIM_Init+0xe8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d106      	bne.n	800103a <LL_TIM_Init+0x6e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <LL_TIM_Init+0xec>)
 8001030:	401a      	ands	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ff99 	bl	8000f80 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	001a      	movs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff85 	bl	8000f68 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <LL_TIM_Init+0xd4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00b      	beq.n	800107e <LL_TIM_Init+0xb2>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a10      	ldr	r2, [pc, #64]	; (80010ac <LL_TIM_Init+0xe0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <LL_TIM_Init+0xb2>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <LL_TIM_Init+0xe4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d003      	beq.n	800107e <LL_TIM_Init+0xb2>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LL_TIM_Init+0xe8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d106      	bne.n	800108c <LL_TIM_Init+0xc0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff ff86 	bl	8000f98 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff8e 	bl	8000fb0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001094:	2300      	movs	r3, #0
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40012c00 	.word	0x40012c00
 80010a4:	40000400 	.word	0x40000400
 80010a8:	40002000 	.word	0x40002000
 80010ac:	40014000 	.word	0x40014000
 80010b0:	40014400 	.word	0x40014400
 80010b4:	40014800 	.word	0x40014800
 80010b8:	fffffcff 	.word	0xfffffcff

080010bc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff f81d 	bl	8000108 <__udivsi3>
 80010ce:	0003      	movs	r3, r0
 80010d0:	001a      	movs	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <LL_InitTick+0x30>)
 80010d4:	3a01      	subs	r2, #1
 80010d6:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <LL_InitTick+0x30>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b03      	ldr	r3, [pc, #12]	; (80010ec <LL_InitTick+0x30>)
 80010e0:	2205      	movs	r2, #5
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80010f8:	23fa      	movs	r3, #250	; 0xfa
 80010fa:	009a      	lsls	r2, r3, #2
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff ffdb 	bl	80010bc <LL_InitTick>
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <LL_SetSystemCoreClock+0x18>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	20000010 	.word	0x20000010

0800112c <memset>:
 800112c:	0003      	movs	r3, r0
 800112e:	1882      	adds	r2, r0, r2
 8001130:	4293      	cmp	r3, r2
 8001132:	d100      	bne.n	8001136 <memset+0xa>
 8001134:	4770      	bx	lr
 8001136:	7019      	strb	r1, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	e7f9      	b.n	8001130 <memset+0x4>

0800113c <__libc_init_array>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	2600      	movs	r6, #0
 8001140:	4c0c      	ldr	r4, [pc, #48]	; (8001174 <__libc_init_array+0x38>)
 8001142:	4d0d      	ldr	r5, [pc, #52]	; (8001178 <__libc_init_array+0x3c>)
 8001144:	1b64      	subs	r4, r4, r5
 8001146:	10a4      	asrs	r4, r4, #2
 8001148:	42a6      	cmp	r6, r4
 800114a:	d109      	bne.n	8001160 <__libc_init_array+0x24>
 800114c:	2600      	movs	r6, #0
 800114e:	f000 f819 	bl	8001184 <_init>
 8001152:	4c0a      	ldr	r4, [pc, #40]	; (800117c <__libc_init_array+0x40>)
 8001154:	4d0a      	ldr	r5, [pc, #40]	; (8001180 <__libc_init_array+0x44>)
 8001156:	1b64      	subs	r4, r4, r5
 8001158:	10a4      	asrs	r4, r4, #2
 800115a:	42a6      	cmp	r6, r4
 800115c:	d105      	bne.n	800116a <__libc_init_array+0x2e>
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	00b3      	lsls	r3, r6, #2
 8001162:	58eb      	ldr	r3, [r5, r3]
 8001164:	4798      	blx	r3
 8001166:	3601      	adds	r6, #1
 8001168:	e7ee      	b.n	8001148 <__libc_init_array+0xc>
 800116a:	00b3      	lsls	r3, r6, #2
 800116c:	58eb      	ldr	r3, [r5, r3]
 800116e:	4798      	blx	r3
 8001170:	3601      	adds	r6, #1
 8001172:	e7f2      	b.n	800115a <__libc_init_array+0x1e>
 8001174:	0800119c 	.word	0x0800119c
 8001178:	0800119c 	.word	0x0800119c
 800117c:	080011a0 	.word	0x080011a0
 8001180:	0800119c 	.word	0x0800119c

08001184 <_init>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118a:	bc08      	pop	{r3}
 800118c:	469e      	mov	lr, r3
 800118e:	4770      	bx	lr

08001190 <_fini>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001196:	bc08      	pop	{r3}
 8001198:	469e      	mov	lr, r3
 800119a:	4770      	bx	lr
